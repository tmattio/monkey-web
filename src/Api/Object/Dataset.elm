-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Object.Dataset exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.Dataset
selection constructor =
    Object.selection constructor


{-| Returns the data type for this repository.
-}
dataType : SelectionSet decodesTo Api.Object.DataType -> Field decodesTo Api.Object.Dataset
dataType object =
    Object.selectionField "dataType" [] object identity


datapoints : SelectionSet decodesTo Api.Union.Datapoint -> Field (List decodesTo) Api.Object.Dataset
datapoints object =
    Object.selectionField "datapoints" [] object (identity >> Decode.list)


{-| The description of the dataset.
-}
description : Field (Maybe String) Api.Object.Dataset
description =
    Object.fieldDecoder "description" [] (Decode.string |> Decode.nullable)


{-| Identifies the primary key from the dataset.
-}
id : Field Api.Scalar.Id Api.Object.Dataset
id =
    Object.fieldDecoder "id" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


{-| Indicates if the dataset is unmaintained.
-}
isArchived : Field Bool Api.Object.Dataset
isArchived =
    Object.fieldDecoder "isArchived" [] Decode.bool


{-| Identifies if the dataset is private.
-}
isPrivate : Field Bool Api.Object.Dataset
isPrivate =
    Object.fieldDecoder "isPrivate" [] Decode.bool


{-| Returns the label definition for this repository.
-}
labelDefinition : SelectionSet decodesTo Api.Union.LabelDefinition -> Field decodesTo Api.Object.Dataset
labelDefinition object =
    Object.selectionField "labelDefinition" [] object identity


labels : SelectionSet decodesTo Api.Union.Label -> Field (List decodesTo) Api.Object.Dataset
labels object =
    Object.selectionField "labels" [] object (identity >> Decode.list)


{-| The license of the repository.
-}
license : Field (Maybe String) Api.Object.Dataset
license =
    Object.fieldDecoder "license" [] (Decode.string |> Decode.nullable)


{-| The name of the repository.
-}
name : Field String Api.Object.Dataset
name =
    Object.fieldDecoder "name" [] Decode.string


{-| The User owner of the repository.
-}
owner : SelectionSet decodesTo Api.Object.User -> Field decodesTo Api.Object.Dataset
owner object =
    Object.selectionField "owner" [] object identity


{-| The slug of the dataset
-}
slug : Field String Api.Object.Dataset
slug =
    Object.fieldDecoder "slug" [] Decode.string


{-| A list of tags for this repository.
-}
tagList : Field (Maybe (List String)) Api.Object.Dataset
tagList =
    Object.fieldDecoder "tagList" [] (Decode.string |> Decode.list |> Decode.nullable)


{-| The HTTP URL of the thumbnail for this repository.
-}
thumbnailUrl : Field (Maybe String) Api.Object.Dataset
thumbnailUrl =
    Object.fieldDecoder "thumbnailUrl" [] (Decode.string |> Decode.nullable)
