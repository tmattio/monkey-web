-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


dataTypes : SelectionSet decodesTo Api.Object.DataType -> Field (List decodesTo) RootQuery
dataTypes object =
    Object.selectionField "dataTypes" [] object (identity >> Decode.list)


type alias DatasetRequiredArguments =
    { name : String, owner : String }


{-| Lookup a given dataset by the owner and dataset name.

  - name - The unique name of the dataset.
  - owner - The login field of a user or organization.

-}
dataset : DatasetRequiredArguments -> SelectionSet decodesTo Api.Object.Dataset -> Field (Maybe decodesTo) RootQuery
dataset requiredArgs object =
    Object.selectionField "dataset" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "owner" requiredArgs.owner Encode.string ] object (identity >> Decode.nullable)


labelTypes : SelectionSet decodesTo Api.Object.LabelType -> Field (List decodesTo) RootQuery
labelTypes object =
    Object.selectionField "labelTypes" [] object (identity >> Decode.list)


type alias SearchDatasetsOptionalArguments =
    { after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


type alias SearchDatasetsRequiredArguments =
    { query : String }


{-| Perform a search across datasets.

  - after - Returns the elements in the list that come after the specified global ID.
  - before - Returns the elements in the list that come before the specified global ID.
  - first - Returns the first n elements from the list.
  - last - Returns the last n elements from the list.
  - query - The search string to look for.

-}
searchDatasets : (SearchDatasetsOptionalArguments -> SearchDatasetsOptionalArguments) -> SearchDatasetsRequiredArguments -> SelectionSet decodesTo Api.Object.Dataset -> Field (Maybe (List (Maybe decodesTo))) RootQuery
searchDatasets fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "searchDatasets" (optionalArgs ++ [ Argument.required "query" requiredArgs.query Encode.string ]) object (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias UserRequiredArguments =
    { username : String }


user : UserRequiredArguments -> SelectionSet decodesTo Api.Object.User -> Field (Maybe decodesTo) RootQuery
user requiredArgs object =
    Object.selectionField "user" [ Argument.required "username" requiredArgs.username Encode.string ] object (identity >> Decode.nullable)


viewer : SelectionSet decodesTo Api.Object.User -> Field decodesTo RootQuery
viewer object =
    Object.selectionField "viewer" [] object identity
